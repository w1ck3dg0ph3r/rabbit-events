// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	amqp "github.com/streadway/amqp"

	mock "github.com/stretchr/testify/mock"
)

// Channel is an autogenerated mock type for the Channel type
type Channel struct {
	mock.Mock
}

// Ack provides a mock function with given fields: tag, multiple
func (_m *Channel) Ack(tag uint64, multiple bool) error {
	ret := _m.Called(tag, multiple)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bool) error); ok {
		r0 = rf(tag, multiple)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Channel) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Confirm provides a mock function with given fields: noWait
func (_m *Channel) Confirm(noWait bool) error {
	ret := _m.Called(noWait)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(noWait)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with given fields: queue, consumer, autoAck, exclusive, noLocal, noWait, args
func (_m *Channel) Consume(queue string, consumer string, autoAck bool, exclusive bool, noLocal bool, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error) {
	ret := _m.Called(queue, consumer, autoAck, exclusive, noLocal, noWait, args)

	var r0 <-chan amqp.Delivery
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, bool, bool, amqp.Table) <-chan amqp.Delivery); ok {
		r0 = rf(queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, bool, bool, bool, amqp.Table) error); ok {
		r1 = rf(queue, consumer, autoAck, exclusive, noLocal, noWait, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeBind provides a mock function with given fields: destination, key, source, noWait, args
func (_m *Channel) ExchangeBind(destination string, key string, source string, noWait bool, args amqp.Table) error {
	ret := _m.Called(destination, key, source, noWait, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool, amqp.Table) error); ok {
		r0 = rf(destination, key, source, noWait, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExchangeDeclare provides a mock function with given fields: name, kind, durable, autoDelete, internal, noWait, args
func (_m *Channel) ExchangeDeclare(name string, kind string, durable bool, autoDelete bool, internal bool, noWait bool, args amqp.Table) error {
	ret := _m.Called(name, kind, durable, autoDelete, internal, noWait, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, bool, bool, amqp.Table) error); ok {
		r0 = rf(name, kind, durable, autoDelete, internal, noWait, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExchangeUnbind provides a mock function with given fields: destination, key, source, noWait, args
func (_m *Channel) ExchangeUnbind(destination string, key string, source string, noWait bool, args amqp.Table) error {
	ret := _m.Called(destination, key, source, noWait, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool, amqp.Table) error); ok {
		r0 = rf(destination, key, source, noWait, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Nack provides a mock function with given fields: tag, multiple, requeue
func (_m *Channel) Nack(tag uint64, multiple bool, requeue bool) error {
	ret := _m.Called(tag, multiple, requeue)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bool, bool) error); ok {
		r0 = rf(tag, multiple, requeue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyClose provides a mock function with given fields: c
func (_m *Channel) NotifyClose(c chan *amqp.Error) chan *amqp.Error {
	ret := _m.Called(c)

	var r0 chan *amqp.Error
	if rf, ok := ret.Get(0).(func(chan *amqp.Error) chan *amqp.Error); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *amqp.Error)
		}
	}

	return r0
}

// NotifyPublish provides a mock function with given fields: confirm
func (_m *Channel) NotifyPublish(confirm chan amqp.Confirmation) chan amqp.Confirmation {
	ret := _m.Called(confirm)

	var r0 chan amqp.Confirmation
	if rf, ok := ret.Get(0).(func(chan amqp.Confirmation) chan amqp.Confirmation); ok {
		r0 = rf(confirm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan amqp.Confirmation)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: exchange, key, mandatory, immediate, msg
func (_m *Channel) Publish(exchange string, key string, mandatory bool, immediate bool, msg amqp.Publishing) error {
	ret := _m.Called(exchange, key, mandatory, immediate, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, amqp.Publishing) error); ok {
		r0 = rf(exchange, key, mandatory, immediate, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Qos provides a mock function with given fields: prefetchCount, prefetchSize, global
func (_m *Channel) Qos(prefetchCount int, prefetchSize int, global bool) error {
	ret := _m.Called(prefetchCount, prefetchSize, global)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, bool) error); ok {
		r0 = rf(prefetchCount, prefetchSize, global)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueBind provides a mock function with given fields: name, key, exchange, noWait, args
func (_m *Channel) QueueBind(name string, key string, exchange string, noWait bool, args amqp.Table) error {
	ret := _m.Called(name, key, exchange, noWait, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool, amqp.Table) error); ok {
		r0 = rf(name, key, exchange, noWait, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueDeclare provides a mock function with given fields: name, durable, autoDelete, exclusive, noWait, args
func (_m *Channel) QueueDeclare(name string, durable bool, autoDelete bool, exclusive bool, noWait bool, args amqp.Table) (amqp.Queue, error) {
	ret := _m.Called(name, durable, autoDelete, exclusive, noWait, args)

	var r0 amqp.Queue
	if rf, ok := ret.Get(0).(func(string, bool, bool, bool, bool, amqp.Table) amqp.Queue); ok {
		r0 = rf(name, durable, autoDelete, exclusive, noWait, args)
	} else {
		r0 = ret.Get(0).(amqp.Queue)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, bool, bool, bool, amqp.Table) error); ok {
		r1 = rf(name, durable, autoDelete, exclusive, noWait, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reject provides a mock function with given fields: tag, requeue
func (_m *Channel) Reject(tag uint64, requeue bool) error {
	ret := _m.Called(tag, requeue)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bool) error); ok {
		r0 = rf(tag, requeue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
